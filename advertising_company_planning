enum Тип_заявок {Тип1, Тип2, Тип3}

enum Состояние_заявок {Принято, Не_принято}

enum Состояние_инженера {Свободен, Занят}



type Инженерные { 

	int количество_в_очереди;

}



type Заявки {

	Тип_заявок тип;

	Состояние_заявок состояние;

}



type Инженеры {

	Состояние_инженера состояние_инжинера = Состояние_инженера.Свободен;

	int количество_вызовов_по_договорам_сервисного_обслуживания;

	int количество_вызовов_поступившие_с_сайта_через_поиск;

	int количество_вызовов_поступившие_с_рекламной_компании;

	Тип_заявок Тип_заявок;

	

	int длительность_min; 

	int длительность_max;

	

	

}



resource инженерная  = Инженерные.create(0);

resource инженер_в_дневную_смену_1 = Инженеры.create(Состояние_инженера.Свободен, 0, 20, 40, Тип_заявок.Тип1,0,0);

resource инженер_в_дневную_смену_2 = Инженеры.create(Состояние_инженера.Свободен, 0, 25, 70, Тип_заявок.Тип2,1,0);

resource инженер_в_ночную_смену_3 = Инженеры.create(Состояние_инженера.Свободен, 0, 30, 60, Тип_заявок.Тип3,0,1);





event Событие_полученных_заявок() { 

	Заявки.create(случайный_тип_заявок.next(), Состояние_заявок.Принято); 

	Событие_полученных_заявок.plan(currentTime + интервал_полученных.next()); 

	инженерная.количество_в_очереди = инженерная.количество_в_очереди + 1; 

}



operation Образец_обслуживания_заявок() { 

	relevant _инженерная = инженерная.onlyif[количество_в_очереди > 0]; 

	relevant _Заявка = Заявки.all.filter[состояние == Состояние_заявок.Принято].any; 

	relevant _Инженер_1 = Инженеры.all.filter[состояние_инжинера == Состояние_инженера.Свободен  

			&& Тип_заявок == _Заявка.тип].minBySafe[количество_вызовов_по_договорам_сервисного_обслуживания];

	relevant _Инженер_2 = Инженеры.all.filter[состояние_инжинера == Состояние_инженера.Свободен  

			&& Тип_заявок == _Заявка.тип].minBySafe[количество_вызовов_поступившие_с_сайта_через_поиск];				

	relevant _Инженер_3 = Инженеры.all.filter[состояние_инжинера == Состояние_инженера.Свободен  

			&& Тип_заявок == _Заявка.тип].minBySafe[количество_вызовов_поступившие_с_рекламной_компании];		

			

			

	set duration() {

		return длительность_обслуживания.next(_Инженер_1.длительность_min, _Инженер_1.длительность_max);

	}

	



	set begin() { 

		_инженерная.количество_в_очереди = _инженерная.количество_в_очереди - 1;

		_Заявка.состояние = Состояние_заявок.Не_принято;

		_Инженер_1.состояние_инжинера = Состояние_инженера.Занят;

		_Инженер_3.состояние_инжинера = Состояние_инженера.Занят;

		_Инженер_3.состояние_инжинера = Состояние_инженера.Занят;

	}



	set end() {

		_Инженер_1.состояние_инжинера = Состояние_инженера.Свободен;

		_Инженер_1.количество_вызовов_по_договорам_сервисного_обслуживания = _Инженер_1.количество_вызовов_по_договорам_сервисного_обслуживания + 1;

		_Заявка.erase();

		_Инженер_2.состояние_инжинера = Состояние_инженера.Свободен;

		_Инженер_2.количество_вызовов_поступившие_с_сайта_через_поиск = _Инженер_2.количество_вызовов_поступившие_с_сайта_через_поиск + 1;

		_Заявка.erase();

		_Инженер_3.состояние_инжинера = Состояние_инженера.Свободен;

		_Инженер_3.количество_вызовов_поступившие_с_рекламной_компании = _Инженер_3.количество_вызовов_поступившие_с_рекламной_компании + 1;

		_Заявка.erase();

	}

}



logic Model {

	activity обслуживание_клиента = new Activity(Образец_обслуживания_заявок.create());

}



sequence интервал_полученных = new Exponential(123456789, 1/30.0);

sequence длительность_обслуживания = new Uniform(123456789);

sequence случайный_тип_заявок = new DiscreteHistogram<Тип_заявок>(123456789,

	#[

		Тип_заявок.Тип1 -> 1.0,

		Тип_заявок.Тип2 -> 5.0,

		Тип_заявок.Тип3 -> 10.0

	]

);



set init() {

	Событие_полученных_заявок.plan(currentTime + интервал_полученных.next());

}



set terminateCondition() {

	return currentTime >= 7 * 12 * 60;

}



resultType Занятость_инженера<Состояние_инженера>(Инженеры инженер) {

	set evaluate() {

		return инженер.состояние_инжинера

	}

}



result занятость_инженера_в_дневную_смену_1 = new Занятость_инженера(инженер_в_дневную_смену_1);

result занятость_инженера_в_дневную_смену_2 = new Занятость_инженера(инженер_в_дневную_смену_1);

result занятость_инженера_в_ночную_смену_3 = new Занятость_инженера(инженер_в_ночную_смену_3);

result обслужено_инженером_в_дневную_смену_1 = new Value([инженер_в_дневную_смену_1.количество_вызовов_по_договорам_сервисного_обслуживания]);

result обслужено_инженером_в_дневную_смену_2 = new Value([инженер_в_дневную_смену_1.количество_вызовов_поступившие_с_сайта_через_поиск]);

result обслужено_инженером_в_ночную_смену_3 = new Value([инженер_в_ночную_смену_3.количество_вызовов_поступившие_с_рекламной_компании]);
